vector<int> FindUnion(const int arr1[], const int arr2[], int n, int m) {
    std::vector<int> Union;
    Union.reserve(n + m);  // Reserve memory for the union vector

    int i = 0, j = 0;  // Pointers
    int lastElement = -1;  // Variable to store the last element added to Union

    while (i < n && j < m) {
        if (arr1[i] <= arr2[j]) {
            if (lastElement != arr1[i]) {
                Union.push_back(arr1[i]);
                lastElement = arr1[i];
            }
            i++;
        } else {
            if (lastElement != arr2[j]) {
                Union.push_back(arr2[j]);
                lastElement = arr2[j];
            }
            j++;
        }
    }

    while (i < n) {
        if (lastElement != arr1[i]) {
            Union.push_back(arr1[i]);
            lastElement = arr1[i];
        }
        i++;
    }

    while (j < m) {
        if (lastElement != arr2[j]) {
            Union.push_back(arr2[j]);
            lastElement = arr2[j];
        }
        j++;
    }

    return Union;
}




